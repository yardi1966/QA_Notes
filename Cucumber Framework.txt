Cucumber Framework - https://www.udemy.com/course/cucumber-java-tutorial/learn/lecture/45379501#overview
//*********************************************

TDD - Test Driven Development
	
	- mainly used by developers to write unit tests
	- Test cases are written before developing the feature
	- Run the test cases once feature is developed
	
	Disadvantages:
		- more time to complete the feature
		- unit tests not easy to understand by business people
		- test cases need to be maintained when requirements change
---------------------------------------------------
		
BDD - Behavior Driven Development

	- Write test cases in English
	- Easy for business people to understand
	- bridges the gap between technical and non-technical 
	
	Scenario #1: Successful login to website
		Given A user brings up the login page
		When A user clicks sign-in
		And A user enter a valid email and password
		And A user clicks submit
		Then A user should be successfully logged into the site
		
	Scenario #2: Unsuccessful login to website
		Given A user brings up the login page
		When A user clicks sign-in
		And A user enter an invalid email and password
		And A user clicks submit
		Then A user should NOT be successfully logged into the site
		
		
					TDD				VS				BDD
					===================================
	starts with writing test cases		starts with writing business scenarios
	written in programming language		written in simple english
	only for developers					for ALL stakeholders
	best for API projects				best for project driven by user actions
	Tools: TestNG, Junit, Nunit, etc	Cucumber, SpecFlow, Mspec etc

//*********************************************	
Cucumber
	- Framework that supports BDD
	- Scenarios are written in Domain Specific Language (Gherkin)
	- Supported languages - Java, Ruby, NodeJS...
	- Supports TestNG and Junit Frameworks
	- Open source
	
	BDD Process
		- Describe Behavior -> Write step definition -> Runa and fail -> write code to make pass -> Run and pass
		
	Implementation
		- requires 3 files
			- Feature files
			- step definiton
			- runner
			
			Feature files
				- contain business scenarios
				- each scenario contains steps
				- extension is .feature
				
			Step Definition
				- A Java class
				- Contains Java/Selenium code for each scenario and steps of feature files
				
			Runner
				- A Java class
				- used to run the feature file
				- location of feature and step definition files

//*********************************************				
	Example feature file
	
	Feature: This file contains login scenarios

	Scenario: User should be able to login with valid username and password
	Given User is on Login Page
	When User enters username "standard_user" and password "secret_sauce"
	And User click on Login button
	Then User should be on home screen

//*********************************************				
	Example Java class generated by running the feature file (right-click on the feature file and click on Run As Cucumber Feature)

		public class LoginSteps {
	
			@Given("User is on Login Page")
			public void user_is_on_login_page() {
			// Write code here that turns the phrase above into concrete actions
			throw new io.cucumber.java.PendingException();
		}

		@When("User enters username {string} and password {string}")
		public void user_enters_username_and_password(String string, String string2) {
	    // Write code here that turns the phrase above into concrete actions
	    throw new io.cucumber.java.PendingException();
		}

		@When("User click on Login button")
		public void user_click_on_login_button() {
	    // Write code here that turns the phrase above into concrete actions
	    throw new io.cucumber.java.PendingException();
		}

		@Then("User should be on home screen")
		public void user_should_be_on_home_screen() {
	    // Write code here that turns the phrase above into concrete actions
	    throw new io.cucumber.java.PendingException();
		}
	}

//*********************************************	
How to run the Feature file directly without a Runner class
	- right-click on the feature file and click on Run As Cucumber Feature

//*********************************************	
To Run by a Runner Class
	- create a new java class
	- name must end with "test"
	ex. LoginRunnerTest
	- requires 3 key items
		- path of the feature file
		- name of the step definition file
		- location of the folder for the output report
		- use the Annotations @CucumberOptions() and @RunWith() on the Class
		ex
		@RunWith(Cucumber.class)
		@CucumberOptions(features = "C:\\Users\\jdaco\\eclipse-workspace\\Cucumber-Automation\\src\\test\\java\\Features\\Login.feature", 
		                 glue = "StepDefinition", plugin = {"pretty", "html:target/cucumber.html" })

//*********************************************	
Gherkin
	- Keywords
		- Feature
		- Scenario
		- When
		- Then
		- And
		- Or
		- Example
		- Background
		- Scenario Outline
		
	Scenario
		- describes the business rule of the Feature
		- one line statement
		- contains the steps (Given, When, Then etc)
		- One feature file can have multiple scenarios
		
	Given
		- describes the pre-condition of a scenario
		- one scenario can have multiple given statements by using the "And" keyword
		- should be written as first steps in scenario
		ex
			Given User is on Login Page
			And username, password and login button should be enabled
			
	Feature
		- High level description of the feature file
		- should be the first keyword in the feature file
		- Cucumber ignores it while executing
		- does not need a step definition method
		- Displayed in the HTML report
		
	When
		- describes steps of scenario
		- one scenario can have multiple "When" steps
		- should be written after the Given statements
		
	Then
		- specifies expected behavior of a scenario
		- one scenario can have nultiple Then statements
		- should be written After the When statement
		
	Background
		- describes common steps of multiple scenarios
		- similar to the @BeforeMethod in TestNG annotations
		- executed before each scenario of the feature file
		- benefit: code reusability
		- should be written outside the scenario

//*********************************************		
Runner Class
	- specifies the location of the Feature file, name of the step definition and more
	- Class name ends with Test
	- @CucumberOptions() and @RunWith applied on class
	- attributes used
		- features
		- glue
		- monochrome (boolean)
			- makes console more readable
		- dryRun (boolean)
			- checks if all step definition methods are available
			- if no, then the scenario will not be executed
		- plugin
//*********************************************
Data Driven Testing
	- Examples table in the feature file
	- examples table data can be used for any step in a scenario
	ex
	Scenario Outline: User should be able to login with valid username and password
	Given User is on Login Page
	When User enters username "<UserName>" and password "<Password>"
	And User click on Login button
	Then User should be on home screen
	Examples:
	|UserName|Password|
	|standard_user|secret_sauce|
	|problem_user|secret_sauce|
	
	This will run the test twice with both usernames and passwords
	
	Data table
		- datatable provides test data to a SINGLE STEP of a scenario, below which it is defined
		- No keyword is used to define data
		
	Scenario: User should be able to login with valid username and password
	Given User enables the feature flags
	|featureFlagName|featureFlagValue|
	|loginFlag|on|
	|homeFlag|on|
	Given User is on Login Page
	When User enters username "standard_user" and password "secret_sauce"
	And User click on Login button
	Then User should be on home screen
	
	//create a list of list of string to handle a 2 dimensional data table
		List<List<String>> flags = table.asLists();
		
		//read the elements 
		for (List<String> row : flags) {
			for (String cell : row) {
				System.out.println(cell+ "\t");
			}
			//start a new line
			System.out.println();
		}
//*********************************************		
Cucumber Hook
	- represents pre and post condition of a scenario
	- automatically executed for all scenarios
	- Types - Before and After
	- written either in Step Definition or a different class
	
	Hook Types:
	
				Before			After
				------			-----
				@Before			@After
				@BeforeStep		@AfterStep
				@BeforeAll		@AfterAll             //setup and tear down tasks. 
													  // Must be a STATIC method because they need to be run without any instance of the class being created
				
	
	Sample @Before Hook
	//*********************************************
	//Before each scenario run this
	@Before
	public void setup() {

		driver = new FirefoxDriver();
		driver.get("https://www.facebook.com");
	}

	//After each scenario run this
	@After
	public void closeBrowser() {
		driver.quit();
	}
	//*********************************************
	
	Sample @BeforeStep Hook
	//*********************************************
	//@BeforeStep Hook
	@BeforeStep
	public void beforeStep() {
		System.out.println("Step has started because of @BeforeStep hook!");
	}

	//@AfterStep hook
	@AfterStep
	public void afterStep() {
		System.out.println("Step has completed because of @AfterStep hook!");
	}
	//*********************************************
	
	Sample @BeforeAll Hook      (MUST BE CREATED AS A STATIC METHOD)
	//*********************************************
	
	//@BeforeAll hook			(MUST BE CREATED AS A STATIC METHOD)
	@BeforeAll
	public static void beforeAll() {
		System.out.println("VPN connected - inside @BeforeAll hook");
	}
	
	//*********************************************
	//@AfterAll hook            (MUST BE CREATED AS A STATIC METHOD)
	@AfterAll
	public static void afterAll() {
		System.out.println("VPN disconnected - inside @AfterAll hook");
	}
	//*********************************************
	
	
Cucumber Tag
	- categorize and manage scenarios
	- used to group scenarios
	- written in the feature file
	- specify the @tag in your runner file to run all scenarios with that tag
	- similar to "Groups" feature of TestNG
	- ex.
		- @login
		- @smoke
		- @regression
		
	feature file:
	@smoke
	Scenario: Login with invalid email and password
	Given User enters invalid email and password
	And User clicks on login button
	Then Error message is displayed
	
	runner file:
	@CucumberOptions(features = "C:\\Users\\jdaco\\eclipse-workspace\\Cucumber-Automation\\src\\test\\java\\Features\\Facebook.feature", 
	glue = "StepDefinition", tags = "@smoke", plugin = {"pretty", "html:target/cucumber.html" })
	
	Multiple tags
		- use "And" / "Or" operators
		- "and"
			- run all scenarios that have both "@a" and "@b" tags
			ex
			
			@smoke @login
			Scenario: Login with invalid email and password
			Given User enters invalid email and password
			And User clicks on login button
			Then Error message is displayed
			
			@CucumberOptions(features = "C:\\Users\\jdaco\\eclipse-workspace\\Cucumber-Automation\\src\\test\\java\\Features\\Facebook.feature", 
			glue = "StepDefinition", tags = "@smoke and @login", plugin = {"pretty", "html:target/cucumber.html" })
			
		- "or"
			- run all scenarios that have at least one of the tags
			
			ex - run scenarios that have either @login or @password
			
			@smoke @login
			Scenario: Login with invalid email and password
			Given User enters invalid email and password
			And User clicks on login button
			Then Error message is displayed

			@regression @password
			Scenario: Forgotten password? link open page to change password
			Given user clicks on Forgotten password link
			Then Forgot password page is displayed
			
			@CucumberOptions(features = "C:\\Users\\jdaco\\eclipse-workspace\\Cucumber-Automation\\src\\test\\java\\Features\\Facebook.feature", 
			glue = "StepDefinition", tags = "@login or @password", plugin = {"pretty", "html:target/cucumber.html" })
			
TestNG
	- testing framework inspired by Junit
	- provides functionality lacking in Junit
	- parallel execution
		- running multiple scenarios simultaneously instead of sequentially
	- advanced configuration options
		- run scenarios via testng.xml file
	- more reporting
		- generates a default html report
	
	
Building a Cucumber Framework (Section 14 - https://www.udemy.com/course/cucumber-java-tutorial/learn/lecture/45400193#overview)

	1. Create a Maven Project
		- Web-Automation-Framework
	2. Add dependencies to the pom.xml
		- 
		<dependencies>

		<!--
		https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-java -->
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-java</artifactId>
			<version>4.27.0</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/io.cucumber/cucumber-java -->
		<dependency>
			<groupId>io.cucumber</groupId>
			<artifactId>cucumber-java</artifactId>
			<version>7.20.1</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/io.cucumber/cucumber-testng -->
		<dependency>
			<groupId>io.cucumber</groupId>
			<artifactId>cucumber-testng</artifactId>
			<version>7.20.1</version>
		</dependency>

		</dependencies>
		
	3.Create the Package structure
		- src/test/java 
		
		- Constants Package
			- manage all the constants required
		- Driver Package Package
			- class to manage driver creation
		- Hooks Package
			- contains all the cucumber hooks
		- Pages Package
			- manage all page object classes
		- Runners Package
			- all the runner classes
		- Step Definitions Package
			- contains all step definition classes
		- Utils Package
			- contains all the utility classes 
		
		- Properties File
		src/test/resources
		- config folder
			- config.properties file
			- test data files
		- features folder
			- feature files
			
		4. Config folder
			- config.properties
				- manage the different types of browsers and environments to test against
				- browser=Chrome
				- environment=qa
			- qa_test_data.properties
				- appurl = https://opensource-demo.orangehrmlive.com/web/index.php/auth/login
			- prod_test_data.properties
				- appurl = <SOME REAL URL>
				
		5. Constants Package
			- public class FrameworkConstants 
			- allows consistency throughout the project
			- only need to make any changes in one location
			- browser names
			- path of config files
			- path of test data files
			- explicit wait time
			- environment and browser
			
		6. Utils Package
			- common reusable utilities
			- public class PropertyUtils
				- ex retrieve data from properties file
				- public static Properties propertyUtils(String filePath)
			- public class TestDataLoader
				- implement logic to load data from the properties file
					- public static TestDataLoader getInstance()
					- private TestDataLoader() 
				- getter method to get each piece of data
					- public String getAppURL() 
					
		7. Driver Package
			- public class DriverFactory
			- handles setup and management of our browsers driver
			- public static WebDriver initDriver(String browserName) 
			
		8. Hooks Package
			- public class Hooks
			- implement all the cucumber hooks
			- public static void beforeHooks() 
			- public static void afterHooks() 
			
			
			
		9. Pages Package
			- public class BasePage
			- manages the application locators
			- to avoid duplication across multiple page classes we will implement a base page class with the common methods
			- each individual page class will extend the base page class to use the methods
			- public BasePage (WebDriver d) 
			- public void click(WebElement element) 
			- public void enterValue(WebElement element, String value)
			- private WebElement waitForClicking(WebElement element) 
			- private WebElement waitForElementToBeVisible(WebElement element) 
			
		10. Feature File
			- login.feature
			
		11. Write locators for the login page
			- public class LoginPage extends BasePage
			- public LoginPage(WebDriver d)
			- public void enterUserName(String value) 
			- public void enterPassword(String value)
			- public void clickOnLogin() 
			
		12. Runner Package
			- @CucumberOptions(features = "src/test/resources/features/login.feature", glue = {"stepdefinitions", "hooks"}, plugin = {"pretty", "html:target/cucumber.html"})
			  public class MyTestNGRunner extends AbstractTestNGCucumberTests
		
		
		Homework:
		
		To practice the framework, automate few scenarios for Orange HRM application.

		Guidelines to use framework :

		Create a separate page object class for each page.

		Create a separate Step definition class for each page.

	Run from the command line:
	
	C:\Users\jdaco\eclipse-workspace\Web-Automation-Framework>mvn -Dtest=MyTestNGRunner test

			
			